const crypto = require('crypto');

const algorithm = 'aes-256-cbc';
const key = crypto.randomBytes(32);
const iv = crypto.randomBytes(16);

function encrypt(text) {
  let cipher = crypto.createCipheriv(algorithm, Buffer.from(key), iv);
  let encrypted = cipher.update(text);
  encrypted = Buffer.concat([encrypted, cipher.final()]);
  return encrypted.toString('hex');
}

function decrypt(text) {
  let encryptedText = Buffer.from(text, 'hex');
  let decipher = crypto.createDecipheriv(algorithm, Buffer.from(key), iv);
  let decrypted = decipher.update(encryptedText);
  decrypted = Buffer.concat([decrypted, decipher.final()]);
  return decrypted.toString();
}
const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8080 });

wss.on('connection', function connection(ws) {
  ws.on('message', function incoming(message) {
    console.log('received: %s', message);

    // Broadcasting the message to all connected users (group chat)
    wss.clients.forEach(function each(client) {
      if (client.readyState === WebSocket.OPEN) {
        client.send(message);
      }
    });
  });
});
import 'package:web_socket_channel/web_socket_channel.dart';

class WebSocketService {
  final channel = WebSocketChannel.connect(Uri.parse('ws://yourserver.com:8080'));

  void sendMessage(String message) {
    channel.sink.add(message);
  }

  Stream getMessages() {
    return channel.stream;
  }
const express = require('express');
const app = express();

let groups = []; // In-memory for simplicity; use SQLite in production

app.post('/createGroup', (req, res) => {
  const { groupName, creatorId } = req.body;
  if (groups.length > 10000) {
    return res.status(400).send('Group member limit reached');
  }
  const newGroup = { id: Date.now(), name: groupName, creator: creatorId, members: [] };
  groups.push(newGroup);
  res.status(201).send(newGroup);
});

app.post('/joinGroup', (req, res) => {
  const { groupId, userId } = req.body;
  const group = groups.find(g => g.id === groupId);
  if (group && group.members.length < 10000) {
    group.members.push(userId);
    res.status(200).send(group);
  } else {
    res.status(400).send('Group is full or does not exist');
  }
});

app.post('/uploadStory', (req, res) => {
  const { userId, storyContent } = req.body;
  const newStory = { id: Date.now(), userId, content: storyContent, timestamp: Date.now() };
  // Save to database
  res.status(201).send(newStory);
});

app.get('/getStories', (req, res) => {
  // Fetch stories for the user
  res.status(200).send(stories); // stories should be fetched from DB
});
